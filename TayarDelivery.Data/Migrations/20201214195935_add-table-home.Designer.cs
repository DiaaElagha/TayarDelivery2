// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TayarDelivery.Data.Data;

namespace TayarDelivery.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201214195935_add-table-home")]
    partial class addtablehome
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConfirmMobileCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DriverLatitude")
                        .HasColumnType("float");

                    b.Property<double?>("DriverLongitude")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FcmToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ForgetPasswordCode")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MobileNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PriceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("UserTypeID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PriceTypeId");

                    b.HasIndex("UserTypeID");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.Home.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Messege")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.Home.HomeInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HomeInfo");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.Home.Services", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.LookUp.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.LookUp.AreasPrice", b =>
                {
                    b.Property<int>("DealerAreaId")
                        .HasColumnType("int");

                    b.Property<int>("ReceverAreaId")
                        .HasColumnType("int");

                    b.Property<bool>("CanDiscount")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("Price")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DealerAreaId", "ReceverAreaId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("ReceverAreaId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("AreasPrice");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.LookUp.CompanyInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("CompanyLatitude")
                        .HasColumnType("float");

                    b.Property<double?>("CompanyLongitude")
                        .HasColumnType("float");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePathCompanyLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsUpNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("appStoreAppLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("facebookLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("googlePlayAppLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("instgramLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("twitterLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyInformation");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.Notification.MessageSMS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("SendDateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceverId");

                    b.ToTable("MessageSMS");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.Notification.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("SendDateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowEdit")
                        .HasColumnType("bit");

                    b.Property<int?>("AreaIdReceiver")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("CustomerLatitude")
                        .HasColumnType("float");

                    b.Property<double?>("CustomerLongitude")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePathTraderSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeliveredSuccess")
                        .HasColumnType("bit");

                    b.Property<float?>("MainPrice")
                        .HasColumnType("real");

                    b.Property<string>("NameReceiver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteDriver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteTrader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumberReceiver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberReceiver2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserDriverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserTraderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("AreaIdReceiver");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("UpdateByUserId");

                    b.HasIndex("UserDriverId");

                    b.HasIndex("UserTraderId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TitlePrograming")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleView")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("DiscountPercentage")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("OrderType");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.PriceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("DiscountPercentage")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("PriceType");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.User.UserProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AllowAdd")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowRemove")
                        .HasColumnType("bit");

                    b.Property<float?>("RatingCompany")
                        .HasColumnType("real");

                    b.HasKey("UserId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TitlePrograming")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleView")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("UserType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.ApplicationUser", b =>
                {
                    b.HasOne("TayarDelivery.Entity.Domins.LookUp.Area", "Area")
                        .WithMany("ApplicationUser")
                        .HasForeignKey("AreaId");

                    b.HasOne("TayarDelivery.Entity.Domins.PriceType", "PriceType")
                        .WithMany("ApplicationUser")
                        .HasForeignKey("PriceTypeId");

                    b.HasOne("TayarDelivery.Entity.Domins.UserType", "UserType")
                        .WithMany("ApplicationUser")
                        .HasForeignKey("UserTypeID");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.Home.ContactUs", b =>
                {
                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.Home.Services", b =>
                {
                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.LookUp.Area", b =>
                {
                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.LookUp.AreasPrice", b =>
                {
                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("TayarDelivery.Entity.Domins.LookUp.Area", "DealerArea")
                        .WithMany()
                        .HasForeignKey("DealerAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayarDelivery.Entity.Domins.LookUp.Area", "ReceverArea")
                        .WithMany()
                        .HasForeignKey("ReceverAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.Notification.MessageSMS", b =>
                {
                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserRecever")
                        .WithMany()
                        .HasForeignKey("ReceverId");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.Notification.Notification", b =>
                {
                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserRecever")
                        .WithMany()
                        .HasForeignKey("ReceverId");

                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserSender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.Order", b =>
                {
                    b.HasOne("TayarDelivery.Entity.Domins.LookUp.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaIdReceiver");

                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("TayarDelivery.Entity.Domins.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("TayarDelivery.Entity.Domins.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId");

                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserDriver")
                        .WithMany()
                        .HasForeignKey("UserDriverId");

                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserTrader")
                        .WithMany()
                        .HasForeignKey("UserTraderId");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.OrderStatus", b =>
                {
                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.OrderType", b =>
                {
                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.PriceType", b =>
                {
                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.User.UserProfile", b =>
                {
                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserDriver")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TayarDelivery.Entity.Domins.UserType", b =>
                {
                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("TayarDelivery.Entity.Domins.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
